name: "Example-Net"
################################################################
# INPUT -> CONV -> RELU -> CONV -> RELU -> POOL -> FC -> RELU -> FC
################################################################
# DATA
################################################################
layer {
    name: "train_data"
    type: "Data"
    top: "data"
    top: "label"
    data_param {
        source: "/home/osboxes/Documents/state-farm-distracted-driver-detection/caffe-examples/resources/train_100__256_256.lmdb"
        batch_size: 16
        backend: LMDB
    }
    #transform_param {
    #    mean_file: "/home/osboxes/Documents/state-farm-distracted-driver-detection/caffe-examples/resources/mean_image_train_100__256_256.lmdb.binproto"
    #}
    include {
        phase: TRAIN
    }
}
layer {
    name: "val_data"
    type: "Data"
    top: "data"
    top: "label"
    data_param {
        source: "/home/osboxes/Documents/state-farm-distracted-driver-detection/caffe-examples/resources/val_100__256_256.lmdb"
        batch_size: 16
        backend: LMDB
    }
    #transform_param {
    #    mean_file: "/home/osboxes/Documents/state-farm-distracted-driver-detection/caffe-examples/resources/mean_image_train_100__256_256.lmdb.binproto"
    #}
    include {
        phase: TEST
    }
}
################################################################
#### 1 : [CONV -> RELU -> CONV -> RELU -> POOL] -> LRN -> DROPOUT
################################################################
layer {
  name: "conv11"
  type: "Convolution"
  bottom: "data"
  top: "conv11"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 20     # learn 20 filters
    kernel_size: 5    # each filter is 5x5
    stride: 1          # step 1 pixels between each filter application
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01
      mean: 0.1
    }
    bias_filler {
      type: "constant" # initialize the biases to 0.2
      value: 0.2
    }
  }
}
layer {
  name: "relu11"
  type: "ReLU"
  bottom: "conv11"
  top: "conv11"
}
layer {
  name: "conv12"
  type: "Convolution"
  bottom: "conv11"
  top: "conv12"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 20
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to 0.2
      value: 0.1
    }
  }
}
layer {
  name: "relu12"
  type: "ReLU"
  bottom: "conv12"
  top: "conv12"
}
layer {
  name: "pool11"
  type: "Pooling"
  bottom: "conv12"
  top: "pool11"
  pooling_param {
    pool: MAX
    kernel_size: 3 # pool over a 3x3 region
    stride: 2      # step two pixels (in the bottom blob) between pooling regions
  }
}
layer {
  name: "norm11"
  type: "LRN"
  bottom: "pool11"
  top: "pool11"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "drop11"
  type: "Dropout"
  bottom: "pool11"
  top: "pool11"
  dropout_param {
    dropout_ratio: 0.7
  }
}
################################################################
#### 1: [FC -> RELU]
################################################################
layer {
  name: "fc11"
  type: "InnerProduct"
  # learning rate and decay multipliers for the weights
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.12
    }
  }
  bottom: "pool11"
  top: "fc11"
}
layer {
  name: "relu31"
  type: "ReLU"
  bottom: "fc11"
  top: "fc11"
}
################################################################
#### FC
################################################################
layer {
  name: "fc31"
  type: "InnerProduct"
  # learning rate and decay multipliers for the weights
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.12
    }
  }
  bottom: "fc11"
  top: "fc31"
}
#### Score -> Softmax + Loss
layer {
  name: "score"
  type: "InnerProduct"
  bottom: "fc31"
  top: "score"
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "score"
  bottom: "label"
  top: "loss"
  loss_weight: 1
  include {
      phase: TRAIN
  }
}
layer {
    name: "prob"
    type: "Softmax"
    bottom: "score"
    top: "prob"
    include {
        phase: TEST
    }
}